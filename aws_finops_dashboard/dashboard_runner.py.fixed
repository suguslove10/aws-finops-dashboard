import argparse
from collections import defaultdict
from typing import Any, Dict, List, Optional, Tuple
import os
import json

import boto3
from rich import box
from rich.console import Console
from rich.progress import track
from rich.status import Status
from rich.table import Column, Table

from aws_finops_dashboard.aws_client import (
    get_accessible_regions,
    get_account_id,
    get_aws_profiles,
    get_budgets,
    get_stopped_instances,
    get_untagged_resources,
    get_unused_eips,
    get_unused_volumes,
)
from aws_finops_dashboard.cost_processor import (
    export_to_csv,
    export_to_json,
    get_cost_data,
    get_trend,
)
from aws_finops_dashboard.helpers import (
    clean_rich_tags,
    export_audit_report_to_pdf,
    export_cost_dashboard_to_pdf,
    export_audit_report_to_csv,
    export_audit_report_to_json,
    export_trend_data_to_json,
    convert_currency,
    format_currency,
)
from aws_finops_dashboard.profile_processor import (
    process_combined_profiles,
    process_single_profile,
)
from aws_finops_dashboard.types import ProfileData
from aws_finops_dashboard.visualisations import create_trend_bars
from aws_finops_dashboard.anomaly_detection import detect_anomalies
from aws_finops_dashboard.optimization_recommendations import generate_optimization_recommendations

console = Console()


def _initialize_profiles(
    args: argparse.Namespace,
) -> Tuple[List[str], Optional[List[str]], Optional[int], str]:
    """Initialize AWS profiles based on arguments."""
    available_profiles = get_aws_profiles()
    if not available_profiles:
        console.log(
            "[bold red]No AWS profiles found. Please configure AWS CLI first.[/]"
        )
        raise SystemExit(1)

    profiles_to_use = []
    if args.profiles:
        for profile in args.profiles:
            if profile in available_profiles:
                profiles_to_use.append(profile)
            else:
                console.log(
                    f"[yellow]Warning: Profile '{profile}' not found in AWS configuration[/]"
                )
        if not profiles_to_use:
            console.log(
                "[bold red]None of the specified profiles were found in AWS configuration.[/]"
            )
            raise SystemExit(1)
    elif args.all:
        profiles_to_use = available_profiles
    else:
        if "default" in available_profiles:
            profiles_to_use = ["default"]
        else:
            profiles_to_use = available_profiles
            console.log(
                "[yellow]No default profile found. Using all available profiles.[/]"
            )

    return profiles_to_use, args.regions, args.time_range, args.currency


def _run_audit_report(profiles_to_use: List[str], args: argparse.Namespace) -> None:
    """Generate and export an audit report."""
    console.print("[bold bright_cyan]Preparing your audit report...[/]")
    table = Table(
        Column("Profile", justify="center"),
        Column("Account ID", justify="center"),
        Column("Untagged Resources"),
        Column("Stopped EC2 Instances"),
        Column("Unused Volumes"),
        Column("Unused EIPs"),
        Column("Budget Alerts"),
        title="AWS FinOps Audit Report",
        show_lines=True,
        box=box.ASCII_DOUBLE_HEAD,
        style="bright_cyan",
    )

    audit_data = []
    raw_audit_data = []
    nl = "\n"
    comma_nl = ",\n"

    for profile in profiles_to_use:
        session = boto3.Session(profile_name=profile)
        account_id = get_account_id(session) or "Unknown"
        regions = args.regions or get_accessible_regions(session)

        try:
            untagged = get_untagged_resources(session, regions)
            anomalies = []
            for service, region_map in untagged.items():
                if region_map:
                    service_block = f"[bright_yellow]{service}[/]:\n"
                    for region, ids in region_map.items():
                        if ids:
                            ids_block = "\n".join(
                                f"[orange1]{res_id}[/]" for res_id in ids
                            )
                            service_block += f"\n{region}:\n{ids_block}\n"
                    anomalies.append(service_block)
            if not any(region_map for region_map in untagged.values()):
                anomalies = ["None"]
        except Exception as e:
            anomalies = [f"Error: {str(e)}"]

        stopped = get_stopped_instances(session, regions)
        stopped_list = [
            f"{r}:\n[gold1]{nl.join(ids)}[/]" for r, ids in stopped.items()
        ] or ["None"]

        unused_vols = get_unused_volumes(session, regions)
        vols_list = [
            f"{r}:\n[dark_orange]{nl.join(ids)}[/]" for r, ids in unused_vols.items()
        ] or ["None"]

        unused_eips = get_unused_eips(session, regions)
        eips_list = [
            f"{r}:\n{comma_nl.join(ids)}" for r, ids in unused_eips.items()
        ] or ["None"]

        budget_data = get_budgets(session)
        alerts = []
        for b in budget_data:
            if b["actual"] > b["limit"]:
                alerts.append(
                    f"[red1]{b['name']}[/]: ${b['actual']:.2f} > ${b['limit']:.2f}"
                )
        if not alerts:
            alerts = ["No budgets exceeded"]

        audit_data.append(
            {
                "profile": profile,
                "account_id": account_id,
                "untagged_resources": clean_rich_tags("\n".join(anomalies)),
                "stopped_instances": clean_rich_tags("\n".join(stopped_list)),
                "unused_volumes": clean_rich_tags("\n".join(vols_list)),
                "unused_eips": clean_rich_tags("\n".join(eips_list)),
                "budget_alerts": clean_rich_tags("\n".join(alerts)),
            }
        )

        # Data for JSON which includes raw audit data
        raw_audit_data.append(
            {
                "profile": profile,
                "account_id": account_id,
                "untagged_resources": untagged,
                "stopped_instances": stopped,
                "unused_volumes": unused_vols,
                "unused_eips": unused_eips,
                "budget_alerts": budget_data,
            }
        )

        table.add_row(
            f"[dark_magenta]{profile}[/]",
            account_id,
            "\n".join(anomalies),
            "\n".join(stopped_list),
            "\n".join(vols_list),
            "\n".join(eips_list),
            "\n".join(alerts),
        )
    console.print(table)
    console.print(
        "[bold bright_cyan]Note: The dashboard only lists untagged EC2, RDS, Lambda, ELBv2.\n[/]"
    )

    if args.report_name:  # Ensure report_name is provided for any export
        if args.report_type:
            for report_type in args.report_type:
                if report_type == "csv":
                    csv_path = export_audit_report_to_csv(
                        audit_data, args.report_name, args.dir
                    )
                    if csv_path:
                        console.print(
                            f"[bright_green]Successfully exported to CSV format: {csv_path}[/]"
                        )
                elif report_type == "json":
                    json_path = export_audit_report_to_json(
                        raw_audit_data, args.report_name, args.dir
                    )
                    if json_path:
                        console.print(
                            f"[bright_green]Successfully exported to JSON format: {json_path}[/]"
                        )
                elif report_type == "pdf":
                    pdf_path = export_audit_report_to_pdf(
                        audit_data, args.report_name, args.dir
                    )
                    if pdf_path:
                        console.print(
                            f"[bright_green]Successfully exported to PDF format: {pdf_path}[/]"
                        )


def _run_trend_analysis(profiles_to_use: List[str], args: argparse.Namespace) -> None:
    """Run cost trend analysis for the past 6 months."""
    console.print(
        "[bright_blue]===== AWS Cost Trend Analysis =====[/]\n"
        "[bright_blue]Running cost trend analysis for the past 6 months...[/]\n"
    )

    try:
        for profile in profiles_to_use:
            console.print(f"[bright_cyan]Processing profile: {profile}[/]")
            session = boto3.Session(profile_name=profile)
            if not session:
                console.print(f"[bold red]Error creating session for profile {profile}[/]")
                continue

            # Get cost data with fetch_trend=True to get the past 6 months
            cost_data = get_cost_data(session, tag=args.tag, fetch_trend=True)
            
            # Check if monthly_trend_data key exists and has data
            if "monthly_trend_data" in cost_data and cost_data["monthly_trend_data"]:
                create_trend_bars(cost_data["monthly_trend_data"], args.currency)
            else:
                console.print("[yellow]No trend data available for this profile[/]")
                
            # Export trend data if a report name is specified
            if args.report_name and "json" in args.report_type:
                trend_data = {
                    "profile": profile,
                    "monthly_costs": cost_data.get("monthly_trend_data", []),
                }
                export_trend_data_to_json(
                    trend_data, args.report_name, args.dir, args.currency
                )

    except Exception as e:
        console.print(f"[bold red]Error in trend analysis: {str(e)}[/]")
        import traceback
        console.print(traceback.format_exc())


# The rest of the file remains unchanged 